##--------------------------------------------------------------------------------------
## Code For Extracting the Distance Between Coordinate Points in Decimal Degrees 
##--------------------------------------------------------------------------------------

library(fossil) 
library(R.utils)

setwd("C:/Users/kanead/Desktop/PhD/Spatial Data/HighResData/Cleaned/LatLong")

mydata<-read.csv("KateX007_Cleaned_LatLong.csv", header = T, sep = ",") ## KatieX007_Cleaned_LatLong was the example

attach(mydata)

mydatacoord <- mydata[ ,1 :6] 

head(mydatacoord)

mydatacoord_sub <- mydatacoord [1:47, ]

head(mydatacoord_sub)

##--------------------------------------------------------------------------------------

## take the first 100 rows as an example

test <- mydatacoord [1:100, ]

## set the date as a factor

test$date<-as.factor(test$date)

## factor removes the levels that have no entries 

test$date<-factor(test$date)
MEAN<-rep(length(levels(test$date)))

## for loop runs through the unique entries for date and pulls out the average latitude

for (i in 1:length(levels(test$date))){
MEAN[i]<-mean(test$lat[test$date==levels(test$date)[i]])


}

print (MEAN[1:3])

## this seems to only extract one column at a time

##--------------------------------------------------------------------------------------

## the split function may be a better technique

split_example <- split(test, with(test, (date)), drop = TRUE)
split_example[1]

ex3<-as.data.frame(split_example[3])
colnames(ex3)<-c("date", "utc", "latitude", "longitude", "lat", "long")
head(ex3)


ex4 <- create.lats(ex3, loc="utc", long="long", lat="lat")

earth.dist(ex4, dist = F)


##--------------------------------------------------------------------------------------

## This works to get the distances between points

#     long       lat     date
#  26.71360 -31.67479 04-04-13
#  26.53347 -31.54144 04-04-13
#  26.36730 -31.39950 04-04-13


Distance<-DT[, earth.dist(test5, dist = TRUE), by=date]
head(Distance$V1[date=="04-04-13"])
head(Distance$V1[date=="04-04-13"], n=1)


##--------------------------------------------------------------------------------------


coordbydate <- mydatacoord_sub 

long_lat_table <- create.lats(mydatacoord_sub, loc="utc", long="long", lat="lat")

coormatrix <- earth.dist(long_lat_table, dist = F)
class(coormatrix)

## Extract the subdiagonals from the matrix which is what we're interested in 
## Note, however that this does not give the distance between the first and last point

diagmatrix <- diag(coormatrix[-1,-ncol(coormatrix)])

## Summing this will give the total distance covered

sum(diagmatrix)

## This takes the first element of the matrix 
## This element represents the first entry of the day 

firstelement <- coormatrix [1] 
firstelement 

## This takes the first column of the matrix and extracts the final element from it
## This element represents the last entry of the day 

lastelement <- coormatrix [,1]
lastelement 

lastelement <- tail(lastelement , n = 1)

##--------------------------------------------------------------------------------------

## This is a roundabout way to select the first and last coordinates in order to 
## determine distance travelled, NOTE that the code has not been written to work out
## distance travlled per day yet 
##--------------------------------------------------------------------------------------

subset <- mydata[, 5:6]
startday <- head(subset, n = 1)

startdaylat <- startday[, 1]
startdaylong <- startday[, 2]

endday <- tail(subset, n = 1)

enddaylat <- endday[, 1]
enddaylong <- endday[, 2]


deg.dist(startdaylong, startdaylat , enddaylong , enddaylat)


##--------------------------------------------------------------------------------------
## Simple Example of the Matrix Calculations Above
##--------------------------------------------------------------------------------------

m <- matrix(1:9,nrow=3)
sum(m)
dummydiag <-diag(m[-1,-ncol(m)])
sum(dummydiag)

##--------------------------------------------------------------------------------------
## I need to get some code that will sum the first element of the matrix i.e. 0 0 with 
## the last element to get distance from A to Z as the crow flies
##--------------------------------------------------------------------------------------

coordinates(mydatacoord) <- c("long", "lat")
list(mydatacoord)

load(R.utils)

m <- matrix(1:9,nrow=3)
sum(m)
dummydiag <-diag(m[-1,-ncol(m)])
sum(dummydiag)

eg <- m[,1]
eg

last <- head(eg, n = 1)

head(eg, n = 1)
tail(eg, n = 1)

##--------------------------------------------------------------------------------------
## The below code creates a data frame from the original dataset using the function create.lats

df = data.frame("date"=test$date, 
                "Lat"= test$lat,
                "Long"= test$long,
                "ID" = test$id) 
endresult = do.call("rbind",by(df, df$date, 
                              function(df) 
                             { data.frame(cbind(df,create.lats(df,loc="ID", long="Long", lat="Lat")),stringsAsFactors=F) } ))

##--------------------------------------------------------------------------------------
## Split the Data by date

X <- split(mydata, mydata$date)

# then turn the resulting list into a dataframe

Y <- lapply(seq_along(X), function(x) as.data.frame(X[[x]])[, 1:2])

# then identify each of the elements that were divided by date

A <- Y[[1]]
B <- Y[[2]] 

# then calculate the distance between the coordinates for each date

earth.dist(A, dist = TRUE)

dist <- earth.dist(A, dist = TRUE)

dist <- as.matrix(dist)

diagdist <-diag(dist[-1,-ncol(dist)]) 
sum(diagdist)			  ## actual distance covered in a day 
 
crowdist <- tail(dist[,1], n = 1) ## distance as the crow flies per day
crowdist 


##--------------------------------------------------------------------------------------
## create a function that extracts the subdiagonals from a matrix which gives daily dist

diagmatrix <- function(x){
diagmat <- diag(x [-1,-ncol(x)])
dailydist <- sum(diagmat)
return(dailydist)
}



diagmat <- llply(measuredistmatrix, diagmatrix) 
##--------------------------------------------------------------------------------------
## create a function that extracts the last element of the matrix of the first column to
## give distance covered as the crow flies 

crowdist <- function(x){
ascrowflies <- tail(x[,1], n = 1)
return(ascrowflies)
}

crowdistday <- llply(measuredistmatrix, crowdist)
